/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.lab7;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author copbu
 */
public class CDStore extends javax.swing.JFrame {

    private final CDManager cdManager;

    /**
     * Creates new form NewJFrame
     * @param cdManager
     */
    public CDStore(CDManager cdManager) {
        initComponents();
        setLocationRelativeTo(null);
        this.setVisible(true);
        this.cdManager = cdManager;
        loadCDs("CDs.Dat");
        fillInCDTable();
        this.setVisible(true);
        CDtable.putClientProperty("JTable.autoStartsEdit", Boolean.FALSE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        NewCdButton = new javax.swing.JButton();
        BackupButton = new javax.swing.JButton();
        RestoreButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CDtable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        searchComboBox = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NewCdButton.setText("NewCD");
        NewCdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCdButtonActionPerformed(evt);
            }
        });

        BackupButton.setText("Backup");
        BackupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackupButtonActionPerformed(evt);
            }
        });

        RestoreButton.setText("Restore");
        RestoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreButtonActionPerformed(evt);
            }
        });

        RefreshButton.setText("Refresh");

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewCdButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BackupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RestoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RefreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewCdButton)
                    .addComponent(BackupButton)
                    .addComponent(RestoreButton)
                    .addComponent(RefreshButton)
                    .addComponent(DeleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        NewCdButton.getAccessibleContext().setAccessibleName("NewCD");

        CDtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ));
        jScrollPane2.setViewportView(CDtable);

        jButton1.setText("Search");

        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewCdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewCdButtonActionPerformed
        // TODO add your handling code here:                       
        new NewCD(this, true, cdManager).setVisible(true);
        this.setVisible(false);
        //loadCDs();
        //fillInCDTable();
     
    }//GEN-LAST:event_NewCdButtonActionPerformed

    private void BackupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackupButtonActionPerformed
 JFileChooser fileChooser = new JFileChooser();
       // TODO add your handling code here: 
       int select = fileChooser.showSaveDialog(this);

        if (select == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String fileName = file.getAbsolutePath();
            saveCDs("CDs.Dat");
            JOptionPane.showMessageDialog(this, "Backup successful.");
            System.out.print("Save as file: " + file.getAbsolutePath());
        }        
    }//GEN-LAST:event_BackupButtonActionPerformed

     private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              

        fillInCDTable();
    }
     
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
                                                  
        DefaultTableModel model = (DefaultTableModel) CDtable.getModel();
        int deleteIndex = CDtable.getSelectedRow();
        if (deleteIndex != -1) {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this CD?",
                    "Confirmation", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                cdManager.getCds().remove(deleteIndex);
            }
            saveCDs("CDs.Dat");
            fillInCDTable();
    }      
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void RestoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreButtonActionPerformed
        // TODO add your handling code here:
         JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.print("Selected file: " + selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_RestoreButtonActionPerformed
   private ArrayList<CD> searchByTitle(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getCds()) {
            if (cd.getTitle().toLowerCase().contains(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByCollection(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getCds()) {
            if (cd.getcDcollecion().toLowerCase().contains(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByType(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getCds()) {
            if (cd.getcDtype().toLowerCase().contentEquals(searchText.toLowerCase())) {
                result.add(cd);
            }
        }
        return result;
    }

    private ArrayList<CD> searchByPrice(String searchText) {
        ArrayList<CD> result = new ArrayList<>();
        for (CD cd : cdManager.getCds()) {
            String price = Double.toString(cd.getPrice());
            if (price.contains(searchText)) {
                result.add(cd);
            }
        }
        return result;
    }
    private void loadCDs(String fileName) {
        ArrayList<CD> temp = new ArrayList<>();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(fileName));
            String line = "";
            while ((line = br.readLine()) != null) {
                String id = line;
                String title = br.readLine();
                String collection = br.readLine();
                String type = br.readLine();
                double price = Double.parseDouble(br.readLine());
                int year = Integer.parseInt(br.readLine());
                CD cd = new CD(id, title, collection, type, price, year);
                temp.add(cd);
            }
            cdManager.setCds(temp);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }
    public void saveCDs(String fileName) {
        //CD(String id, String title, String collection, String type, double price, int year) 
        PrintWriter pw = null;
        try {
            pw = new PrintWriter(new FileWriter(fileName));
            for (CD cd : cdManager.getCds()) {
                pw.println(cd.getiD());
                pw.println(cd.getTitle());
                pw.println(cd.getcDcollecion());
                pw.println(cd.getcDtype());
                pw.println(String.format("%.2f", cd.getPrice()));
                pw.println(String.format("%d", cd.getYearOfRelease()));

            }
            pw.flush();
        } catch (IOException ex) {
        } finally {
            pw.close();
        }
    }
     private void fillInCDTable() {
        //Delete all row
        this.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) CDtable.getModel();

        //Add row
        model.setRowCount(0);
        Vector rowS;
        //CD(String id, String title, String collection, String type, double price, int year) 
        for (CD cd : cdManager.getCds()) {
            rowS = new Vector<>();

            rowS.add(cd.getTitle());
            rowS.add(cd.getcDcollecion());
            rowS.add(cd.getcDtype());
            rowS.add(cd.getPrice());

            model.addRow(rowS);
        }
        this.setVisible(true);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CDStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CDStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CDStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CDStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CDManager cdManager = null;
                new CDStore(cdManager).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackupButton;
    private javax.swing.JTable CDtable;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton NewCdButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton RestoreButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
